import java.io.*;
import java.util.*;

public class Ride implements RideInterface {
    private final int maxRiders;
    private final Employee operator;
    private final Queue<Visitor> waitingQueue = new LinkedList<>();
    private final List<Visitor> rideHistory = new LinkedList<>();
    private int numOfCycles; 
    
    public Ride(String rideName, int maxRiders, Employee operator){ 
        this.maxRiders = maxRiders;
        this.operator = operator;
        this.numOfCycles = 0;
    }

    @Override
    public void addVisitorToQueue(Visitor visitor) {
        waitingQueue.add(visitor);
        System.out.println(visitor.getName() + " have joined the queue.");
    }

    @Override
    public void removeVisitorFromQueue() {
        Visitor removed = waitingQueue.poll();
        if (removed != null) {
            System.out.println(removed.getName() + " Removed from the queue.");
        } else {
            System.out.println("The queue is empty and cannot be removed.");
        }
    }

    @Override
    public void printQueue() {
        System.out.println("Visitors waiting in line:");
        for (Visitor v : waitingQueue) {
            System.out.println(v.getName());
        }
    }

    @Override
    public void addVisitorToHistory(Visitor visitor) {
        if (!rideHistory.contains(visitor)) {
            rideHistory.add(visitor);
        }
    }

    @Override
    public boolean checkVisitorFromHistory(Visitor visitor) {
        return rideHistory.contains(visitor);
    }

    @Override
    public int numberOfVisitors() {
        return rideHistory.size();
    }

    @Override
    public void printRideHistory() {
        System.out.println("Play History:");
        for (Visitor v : rideHistory) {
            System.out.println(v.getName() + " - " + v.getGender() + " - " + v.getVisitorID() + " - " + v.getMembershipType());
        }
    }

    @Override
    public void runOneCycle() {
        if (operator == null) {
            System.out.println("No operator is assigned and the ride cannot be run.");
            return;
        }
        if (waitingQueue.isEmpty()) {
            System.out.println("The queue is empty and the ride cannot be run.");
            return;
        }

        System.out.println("Start running a ride...");
        int count = 0;
        while (!waitingQueue.isEmpty() && count < maxRiders) {
            Visitor visitor = waitingQueue.poll();
            addVisitorToHistory(visitor);
            System.out.println(visitor.getName() + " Play has been completed.");
            count++;
        }
        numOfCycles++;
        System.out.println("This round is complete, total " + count + " visitors played.");
    }

    public void exportRideHistory() {
        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream("ride_history.csv"), "UTF-8"))) { // 指定 UTF-8 编码
            for (Visitor visitor : rideHistory) {
                writer.write(visitor.getName() + "," 
                            + visitor.getVisitorID() + "," 
                            + visitor.getMembershipType() + "," 
                            + visitor.getGender() + "\n"); // 包含性别字段
            }
            System.out.println("Ride history has been exported.");
        } catch (IOException e) {
            System.out.println("Error while exporting ride history: " + e.getMessage());
        }
    }

    public void importRideHistory() {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(
                new FileInputStream("ride_history.csv"), "UTF-8"))) { // 设置 UTF-8 编码
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                String name = data[0];
                String visitorID = data[1];
                String membershipType = data[2];
                String gender = data[3]; // 读取性别字段
                Visitor visitor = new Visitor(name, 0, gender, visitorID, membershipType); // 初始化时设置性别
                if (!rideHistory.contains(visitor)) {
                    rideHistory.add(visitor);
                }
            }
            System.out.println("Ride history has been imported.");
        } catch (IOException e) {
            System.out.println("Error while importing ride history: " + e.getMessage());
        }
    }
}
